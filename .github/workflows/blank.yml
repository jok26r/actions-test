# This is a basic workflow to help you get started with Actions

name: CI
#

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:
    branches: [ main ]
  release:
        types: [ published ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      env-to-dep:
        description: 'env-to-dep'
        required: false
        default: 'test'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      SECRET_SUFFIXES: 'FILE ANOTHER_FILE'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      -   name: Set ENV_NAME env variable
          run: |
            if [[ "$GITHUB_EVENT_NAME" == 'workflow_dispatch' ]]; then
                echo "ENV_NAME=${{github.event.inputs.environment-to-deploy}}" >> ${GITHUB_ENV}
            else
                if [[ "$GITHUB_EVENT_NAME" == 'push' ]]; then
                    ref_without_ref_heads=${GITHUB_REF#refs/heads/}
                    ref_with_dashes=${ref_without_ref_heads//\//-}
                elif [[ "$GITHUB_EVENT_NAME" == 'pull_request' ]]; then
                    ref_with_dashes=${GITHUB_HEAD_REF//\//-}
                else
                    echo "Environment name variable wasn't set because such github.event_name $GITHUB_EVENT_NAME is not processed in the workflow"
                    exit 1
                fi

                echo "ref_with_dashes value - $ref_with_dashes"
                if [[ $ref_with_dashes == 'test-jok26r-patch-2' ]]; then
                  env_name='test'
                else
                  env_name='dev'
                fi
                [[ -n $env_name ]] && echo "ENV_NAME=env_name" >> ${GITHUB_ENV} || exit 1
            fi
      - name: Set all secret names
        run: |
          for suffix in ${SECRET_SUFFIXES[@]}
          do
            echo "${suffix}_VARIABLE_NAME=${ENV_NAME^^}_${suffix}" >> ${GITHUB_ENV}
          done

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        env:
          FILE_CONTENT: ${{ secrets[env.FILE_VARIABLE_NAME] }}
          ANOTHER_FILE_CONTENT: ${{ secrets[env.ANOTHER_FILE_VARIABLE_NAME] }}
        run: |
          set
          echo $FILE_CONTENT | base64 -d
          echo $ANOTHER_FILE_CONTENT
